"use strict";
(self["webpackChunkrust_js"] = self["webpackChunkrust_js"] || []).push([["node_modules_monaco-editor_esm_vs_basic-languages_qsharp_qsharp_js"],{

/***/ "./node_modules/monaco-editor/esm/vs/basic-languages/qsharp/qsharp.js":
/*!****************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/basic-languages/qsharp/qsharp.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   conf: () => (/* binding */ conf),
/* harmony export */   language: () => (/* binding */ language)
/* harmony export */ });
/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.47.0(69991d66135e4a1fc1cf0b1ac4ad25d429866a0d)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/


// src/basic-languages/qsharp/qsharp.ts
var conf = {
  comments: {
    lineComment: "//"
  },
  brackets: [
    ["{", "}"],
    ["[", "]"],
    ["(", ")"]
  ],
  autoClosingPairs: [
    { open: "{", close: "}" },
    { open: "[", close: "]" },
    { open: "(", close: ")" },
    { open: '"', close: '"', notIn: ["string", "comment"] }
  ],
  surroundingPairs: [
    { open: "{", close: "}" },
    { open: "[", close: "]" },
    { open: "(", close: ")" },
    { open: '"', close: '"' }
  ]
};
var language = {
  // Set defaultToken to invalid to see what you do not tokenize yet
  keywords: [
    "namespace",
    "open",
    "as",
    "operation",
    "function",
    "body",
    "adjoint",
    "newtype",
    "controlled",
    "if",
    "elif",
    "else",
    "repeat",
    "until",
    "fixup",
    "for",
    "in",
    "while",
    "return",
    "fail",
    "within",
    "apply",
    "Adjoint",
    "Controlled",
    "Adj",
    "Ctl",
    "is",
    "self",
    "auto",
    "distribute",
    "invert",
    "intrinsic",
    "let",
    "set",
    "w/",
    "new",
    "not",
    "and",
    "or",
    "use",
    "borrow",
    "using",
    "borrowing",
    "mutable",
    "internal"
  ],
  typeKeywords: [
    "Unit",
    "Int",
    "BigInt",
    "Double",
    "Bool",
    "String",
    "Qubit",
    "Result",
    "Pauli",
    "Range"
  ],
  invalidKeywords: [
    "abstract",
    "base",
    "bool",
    "break",
    "byte",
    "case",
    "catch",
    "char",
    "checked",
    "class",
    "const",
    "continue",
    "decimal",
    "default",
    "delegate",
    "do",
    "double",
    "enum",
    "event",
    "explicit",
    "extern",
    "finally",
    "fixed",
    "float",
    "foreach",
    "goto",
    "implicit",
    "int",
    "interface",
    "lock",
    "long",
    "null",
    "object",
    "operator",
    "out",
    "override",
    "params",
    "private",
    "protected",
    "public",
    "readonly",
    "ref",
    "sbyte",
    "sealed",
    "short",
    "sizeof",
    "stackalloc",
    "static",
    "string",
    "struct",
    "switch",
    "this",
    "throw",
    "try",
    "typeof",
    "unit",
    "ulong",
    "unchecked",
    "unsafe",
    "ushort",
    "virtual",
    "void",
    "volatile"
  ],
  constants: ["true", "false", "PauliI", "PauliX", "PauliY", "PauliZ", "One", "Zero"],
  builtin: [
    "X",
    "Y",
    "Z",
    "H",
    "HY",
    "S",
    "T",
    "SWAP",
    "CNOT",
    "CCNOT",
    "MultiX",
    "R",
    "RFrac",
    "Rx",
    "Ry",
    "Rz",
    "R1",
    "R1Frac",
    "Exp",
    "ExpFrac",
    "Measure",
    "M",
    "MultiM",
    "Message",
    "Length",
    "Assert",
    "AssertProb",
    "AssertEqual"
  ],
  operators: [
    "and=",
    "<-",
    "->",
    "*",
    "*=",
    "@",
    "!",
    "^",
    "^=",
    ":",
    "::",
    "..",
    "==",
    "...",
    "=",
    "=>",
    ">",
    ">=",
    "<",
    "<=",
    "-",
    "-=",
    "!=",
    "or=",
    "%",
    "%=",
    "|",
    "+",
    "+=",
    "?",
    "/",
    "/=",
    "&&&",
    "&&&=",
    "^^^",
    "^^^=",
    ">>>",
    ">>>=",
    "<<<",
    "<<<=",
    "|||",
    "|||=",
    "~~~",
    "_",
    "w/",
    "w/="
  ],
  namespaceFollows: ["namespace", "open"],
  symbols: /[=><!~?:&|+\-*\/\^%@._]+/,
  escapes: /\\[\s\S]/,
  // The main tokenizer for our languages
  tokenizer: {
    root: [
      // identifiers and keywords
      [
        /[a-zA-Z_$][\w$]*/,
        {
          cases: {
            "@namespaceFollows": {
              token: "keyword.$0",
              next: "@namespace"
            },
            "@typeKeywords": "type",
            "@keywords": "keyword",
            "@constants": "constant",
            "@builtin": "keyword",
            "@invalidKeywords": "invalid",
            "@default": "identifier"
          }
        }
      ],
      // whitespace
      { include: "@whitespace" },
      // delimiters and operators
      [/[{}()\[\]]/, "@brackets"],
      [/@symbols/, { cases: { "@operators": "operator", "@default": "" } }],
      // numbers
      [/\d*\.\d+([eE][\-+]?\d+)?/, "number.float"],
      [/\d+/, "number"],
      // delimiter: after number because of .\d floats
      [/[;,.]/, "delimiter"],
      // strings
      //[/"([^"\\]|\\.)*$/, 'string.invalid' ],  // non-teminated string
      [/"/, { token: "string.quote", bracket: "@open", next: "@string" }]
    ],
    string: [
      [/[^\\"]+/, "string"],
      [/@escapes/, "string.escape"],
      [/"/, { token: "string.quote", bracket: "@close", next: "@pop" }]
    ],
    namespace: [
      { include: "@whitespace" },
      [/[A-Za-z]\w*/, "namespace"],
      [/[\.=]/, "delimiter"],
      ["", "", "@pop"]
    ],
    whitespace: [
      [/[ \t\r\n]+/, "white"],
      [/(\/\/).*/, "comment"]
    ]
  }
};



/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZV9tb2R1bGVzX21vbmFjby1lZGl0b3JfZXNtX3ZzX2Jhc2ljLWxhbmd1YWdlc19xc2hhcnBfcXNoYXJwX2pzLmJ1bmRsZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxPQUFPLEtBQUs7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU0sUUFBUSxZQUFZLEdBQUc7QUFDN0IsTUFBTSx1QkFBdUI7QUFDN0IsTUFBTSx1QkFBdUI7QUFDN0IsTUFBTTtBQUNOO0FBQ0E7QUFDQSxNQUFNLFFBQVEsWUFBWSxHQUFHO0FBQzdCLE1BQU0sdUJBQXVCO0FBQzdCLE1BQU0sdUJBQXVCO0FBQzdCLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSx3QkFBd0I7QUFDaEM7QUFDQSxXQUFXO0FBQ1gscUJBQXFCLFNBQVMsNENBQTRDO0FBQzFFO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQSxjQUFjLDBEQUEwRDtBQUN4RTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsd0RBQXdEO0FBQ3RFO0FBQ0E7QUFDQSxRQUFRLHdCQUF3QjtBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUlFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcnVzdC5qcy8uL25vZGVfbW9kdWxlcy9tb25hY28tZWRpdG9yL2VzbS92cy9iYXNpYy1sYW5ndWFnZXMvcXNoYXJwL3FzaGFycC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiEtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBWZXJzaW9uOiAwLjQ3LjAoNjk5OTFkNjYxMzVlNGExZmMxY2YwYjFhYzRhZDI1ZDQyOTg2NmEwZClcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxuICogaHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdC9tb25hY28tZWRpdG9yL2Jsb2IvbWFpbi9MSUNFTlNFLnR4dFxuICotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cblxuLy8gc3JjL2Jhc2ljLWxhbmd1YWdlcy9xc2hhcnAvcXNoYXJwLnRzXG52YXIgY29uZiA9IHtcbiAgY29tbWVudHM6IHtcbiAgICBsaW5lQ29tbWVudDogXCIvL1wiXG4gIH0sXG4gIGJyYWNrZXRzOiBbXG4gICAgW1wie1wiLCBcIn1cIl0sXG4gICAgW1wiW1wiLCBcIl1cIl0sXG4gICAgW1wiKFwiLCBcIilcIl1cbiAgXSxcbiAgYXV0b0Nsb3NpbmdQYWlyczogW1xuICAgIHsgb3BlbjogXCJ7XCIsIGNsb3NlOiBcIn1cIiB9LFxuICAgIHsgb3BlbjogXCJbXCIsIGNsb3NlOiBcIl1cIiB9LFxuICAgIHsgb3BlbjogXCIoXCIsIGNsb3NlOiBcIilcIiB9LFxuICAgIHsgb3BlbjogJ1wiJywgY2xvc2U6ICdcIicsIG5vdEluOiBbXCJzdHJpbmdcIiwgXCJjb21tZW50XCJdIH1cbiAgXSxcbiAgc3Vycm91bmRpbmdQYWlyczogW1xuICAgIHsgb3BlbjogXCJ7XCIsIGNsb3NlOiBcIn1cIiB9LFxuICAgIHsgb3BlbjogXCJbXCIsIGNsb3NlOiBcIl1cIiB9LFxuICAgIHsgb3BlbjogXCIoXCIsIGNsb3NlOiBcIilcIiB9LFxuICAgIHsgb3BlbjogJ1wiJywgY2xvc2U6ICdcIicgfVxuICBdXG59O1xudmFyIGxhbmd1YWdlID0ge1xuICAvLyBTZXQgZGVmYXVsdFRva2VuIHRvIGludmFsaWQgdG8gc2VlIHdoYXQgeW91IGRvIG5vdCB0b2tlbml6ZSB5ZXRcbiAga2V5d29yZHM6IFtcbiAgICBcIm5hbWVzcGFjZVwiLFxuICAgIFwib3BlblwiLFxuICAgIFwiYXNcIixcbiAgICBcIm9wZXJhdGlvblwiLFxuICAgIFwiZnVuY3Rpb25cIixcbiAgICBcImJvZHlcIixcbiAgICBcImFkam9pbnRcIixcbiAgICBcIm5ld3R5cGVcIixcbiAgICBcImNvbnRyb2xsZWRcIixcbiAgICBcImlmXCIsXG4gICAgXCJlbGlmXCIsXG4gICAgXCJlbHNlXCIsXG4gICAgXCJyZXBlYXRcIixcbiAgICBcInVudGlsXCIsXG4gICAgXCJmaXh1cFwiLFxuICAgIFwiZm9yXCIsXG4gICAgXCJpblwiLFxuICAgIFwid2hpbGVcIixcbiAgICBcInJldHVyblwiLFxuICAgIFwiZmFpbFwiLFxuICAgIFwid2l0aGluXCIsXG4gICAgXCJhcHBseVwiLFxuICAgIFwiQWRqb2ludFwiLFxuICAgIFwiQ29udHJvbGxlZFwiLFxuICAgIFwiQWRqXCIsXG4gICAgXCJDdGxcIixcbiAgICBcImlzXCIsXG4gICAgXCJzZWxmXCIsXG4gICAgXCJhdXRvXCIsXG4gICAgXCJkaXN0cmlidXRlXCIsXG4gICAgXCJpbnZlcnRcIixcbiAgICBcImludHJpbnNpY1wiLFxuICAgIFwibGV0XCIsXG4gICAgXCJzZXRcIixcbiAgICBcIncvXCIsXG4gICAgXCJuZXdcIixcbiAgICBcIm5vdFwiLFxuICAgIFwiYW5kXCIsXG4gICAgXCJvclwiLFxuICAgIFwidXNlXCIsXG4gICAgXCJib3Jyb3dcIixcbiAgICBcInVzaW5nXCIsXG4gICAgXCJib3Jyb3dpbmdcIixcbiAgICBcIm11dGFibGVcIixcbiAgICBcImludGVybmFsXCJcbiAgXSxcbiAgdHlwZUtleXdvcmRzOiBbXG4gICAgXCJVbml0XCIsXG4gICAgXCJJbnRcIixcbiAgICBcIkJpZ0ludFwiLFxuICAgIFwiRG91YmxlXCIsXG4gICAgXCJCb29sXCIsXG4gICAgXCJTdHJpbmdcIixcbiAgICBcIlF1Yml0XCIsXG4gICAgXCJSZXN1bHRcIixcbiAgICBcIlBhdWxpXCIsXG4gICAgXCJSYW5nZVwiXG4gIF0sXG4gIGludmFsaWRLZXl3b3JkczogW1xuICAgIFwiYWJzdHJhY3RcIixcbiAgICBcImJhc2VcIixcbiAgICBcImJvb2xcIixcbiAgICBcImJyZWFrXCIsXG4gICAgXCJieXRlXCIsXG4gICAgXCJjYXNlXCIsXG4gICAgXCJjYXRjaFwiLFxuICAgIFwiY2hhclwiLFxuICAgIFwiY2hlY2tlZFwiLFxuICAgIFwiY2xhc3NcIixcbiAgICBcImNvbnN0XCIsXG4gICAgXCJjb250aW51ZVwiLFxuICAgIFwiZGVjaW1hbFwiLFxuICAgIFwiZGVmYXVsdFwiLFxuICAgIFwiZGVsZWdhdGVcIixcbiAgICBcImRvXCIsXG4gICAgXCJkb3VibGVcIixcbiAgICBcImVudW1cIixcbiAgICBcImV2ZW50XCIsXG4gICAgXCJleHBsaWNpdFwiLFxuICAgIFwiZXh0ZXJuXCIsXG4gICAgXCJmaW5hbGx5XCIsXG4gICAgXCJmaXhlZFwiLFxuICAgIFwiZmxvYXRcIixcbiAgICBcImZvcmVhY2hcIixcbiAgICBcImdvdG9cIixcbiAgICBcImltcGxpY2l0XCIsXG4gICAgXCJpbnRcIixcbiAgICBcImludGVyZmFjZVwiLFxuICAgIFwibG9ja1wiLFxuICAgIFwibG9uZ1wiLFxuICAgIFwibnVsbFwiLFxuICAgIFwib2JqZWN0XCIsXG4gICAgXCJvcGVyYXRvclwiLFxuICAgIFwib3V0XCIsXG4gICAgXCJvdmVycmlkZVwiLFxuICAgIFwicGFyYW1zXCIsXG4gICAgXCJwcml2YXRlXCIsXG4gICAgXCJwcm90ZWN0ZWRcIixcbiAgICBcInB1YmxpY1wiLFxuICAgIFwicmVhZG9ubHlcIixcbiAgICBcInJlZlwiLFxuICAgIFwic2J5dGVcIixcbiAgICBcInNlYWxlZFwiLFxuICAgIFwic2hvcnRcIixcbiAgICBcInNpemVvZlwiLFxuICAgIFwic3RhY2thbGxvY1wiLFxuICAgIFwic3RhdGljXCIsXG4gICAgXCJzdHJpbmdcIixcbiAgICBcInN0cnVjdFwiLFxuICAgIFwic3dpdGNoXCIsXG4gICAgXCJ0aGlzXCIsXG4gICAgXCJ0aHJvd1wiLFxuICAgIFwidHJ5XCIsXG4gICAgXCJ0eXBlb2ZcIixcbiAgICBcInVuaXRcIixcbiAgICBcInVsb25nXCIsXG4gICAgXCJ1bmNoZWNrZWRcIixcbiAgICBcInVuc2FmZVwiLFxuICAgIFwidXNob3J0XCIsXG4gICAgXCJ2aXJ0dWFsXCIsXG4gICAgXCJ2b2lkXCIsXG4gICAgXCJ2b2xhdGlsZVwiXG4gIF0sXG4gIGNvbnN0YW50czogW1widHJ1ZVwiLCBcImZhbHNlXCIsIFwiUGF1bGlJXCIsIFwiUGF1bGlYXCIsIFwiUGF1bGlZXCIsIFwiUGF1bGlaXCIsIFwiT25lXCIsIFwiWmVyb1wiXSxcbiAgYnVpbHRpbjogW1xuICAgIFwiWFwiLFxuICAgIFwiWVwiLFxuICAgIFwiWlwiLFxuICAgIFwiSFwiLFxuICAgIFwiSFlcIixcbiAgICBcIlNcIixcbiAgICBcIlRcIixcbiAgICBcIlNXQVBcIixcbiAgICBcIkNOT1RcIixcbiAgICBcIkNDTk9UXCIsXG4gICAgXCJNdWx0aVhcIixcbiAgICBcIlJcIixcbiAgICBcIlJGcmFjXCIsXG4gICAgXCJSeFwiLFxuICAgIFwiUnlcIixcbiAgICBcIlJ6XCIsXG4gICAgXCJSMVwiLFxuICAgIFwiUjFGcmFjXCIsXG4gICAgXCJFeHBcIixcbiAgICBcIkV4cEZyYWNcIixcbiAgICBcIk1lYXN1cmVcIixcbiAgICBcIk1cIixcbiAgICBcIk11bHRpTVwiLFxuICAgIFwiTWVzc2FnZVwiLFxuICAgIFwiTGVuZ3RoXCIsXG4gICAgXCJBc3NlcnRcIixcbiAgICBcIkFzc2VydFByb2JcIixcbiAgICBcIkFzc2VydEVxdWFsXCJcbiAgXSxcbiAgb3BlcmF0b3JzOiBbXG4gICAgXCJhbmQ9XCIsXG4gICAgXCI8LVwiLFxuICAgIFwiLT5cIixcbiAgICBcIipcIixcbiAgICBcIio9XCIsXG4gICAgXCJAXCIsXG4gICAgXCIhXCIsXG4gICAgXCJeXCIsXG4gICAgXCJePVwiLFxuICAgIFwiOlwiLFxuICAgIFwiOjpcIixcbiAgICBcIi4uXCIsXG4gICAgXCI9PVwiLFxuICAgIFwiLi4uXCIsXG4gICAgXCI9XCIsXG4gICAgXCI9PlwiLFxuICAgIFwiPlwiLFxuICAgIFwiPj1cIixcbiAgICBcIjxcIixcbiAgICBcIjw9XCIsXG4gICAgXCItXCIsXG4gICAgXCItPVwiLFxuICAgIFwiIT1cIixcbiAgICBcIm9yPVwiLFxuICAgIFwiJVwiLFxuICAgIFwiJT1cIixcbiAgICBcInxcIixcbiAgICBcIitcIixcbiAgICBcIis9XCIsXG4gICAgXCI/XCIsXG4gICAgXCIvXCIsXG4gICAgXCIvPVwiLFxuICAgIFwiJiYmXCIsXG4gICAgXCImJiY9XCIsXG4gICAgXCJeXl5cIixcbiAgICBcIl5eXj1cIixcbiAgICBcIj4+PlwiLFxuICAgIFwiPj4+PVwiLFxuICAgIFwiPDw8XCIsXG4gICAgXCI8PDw9XCIsXG4gICAgXCJ8fHxcIixcbiAgICBcInx8fD1cIixcbiAgICBcIn5+flwiLFxuICAgIFwiX1wiLFxuICAgIFwidy9cIixcbiAgICBcIncvPVwiXG4gIF0sXG4gIG5hbWVzcGFjZUZvbGxvd3M6IFtcIm5hbWVzcGFjZVwiLCBcIm9wZW5cIl0sXG4gIHN5bWJvbHM6IC9bPT48IX4/OiZ8K1xcLSpcXC9cXF4lQC5fXSsvLFxuICBlc2NhcGVzOiAvXFxcXFtcXHNcXFNdLyxcbiAgLy8gVGhlIG1haW4gdG9rZW5pemVyIGZvciBvdXIgbGFuZ3VhZ2VzXG4gIHRva2VuaXplcjoge1xuICAgIHJvb3Q6IFtcbiAgICAgIC8vIGlkZW50aWZpZXJzIGFuZCBrZXl3b3Jkc1xuICAgICAgW1xuICAgICAgICAvW2EtekEtWl8kXVtcXHckXSovLFxuICAgICAgICB7XG4gICAgICAgICAgY2FzZXM6IHtcbiAgICAgICAgICAgIFwiQG5hbWVzcGFjZUZvbGxvd3NcIjoge1xuICAgICAgICAgICAgICB0b2tlbjogXCJrZXl3b3JkLiQwXCIsXG4gICAgICAgICAgICAgIG5leHQ6IFwiQG5hbWVzcGFjZVwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJAdHlwZUtleXdvcmRzXCI6IFwidHlwZVwiLFxuICAgICAgICAgICAgXCJAa2V5d29yZHNcIjogXCJrZXl3b3JkXCIsXG4gICAgICAgICAgICBcIkBjb25zdGFudHNcIjogXCJjb25zdGFudFwiLFxuICAgICAgICAgICAgXCJAYnVpbHRpblwiOiBcImtleXdvcmRcIixcbiAgICAgICAgICAgIFwiQGludmFsaWRLZXl3b3Jkc1wiOiBcImludmFsaWRcIixcbiAgICAgICAgICAgIFwiQGRlZmF1bHRcIjogXCJpZGVudGlmaWVyXCJcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICAvLyB3aGl0ZXNwYWNlXG4gICAgICB7IGluY2x1ZGU6IFwiQHdoaXRlc3BhY2VcIiB9LFxuICAgICAgLy8gZGVsaW1pdGVycyBhbmQgb3BlcmF0b3JzXG4gICAgICBbL1t7fSgpXFxbXFxdXS8sIFwiQGJyYWNrZXRzXCJdLFxuICAgICAgWy9Ac3ltYm9scy8sIHsgY2FzZXM6IHsgXCJAb3BlcmF0b3JzXCI6IFwib3BlcmF0b3JcIiwgXCJAZGVmYXVsdFwiOiBcIlwiIH0gfV0sXG4gICAgICAvLyBudW1iZXJzXG4gICAgICBbL1xcZCpcXC5cXGQrKFtlRV1bXFwtK10/XFxkKyk/LywgXCJudW1iZXIuZmxvYXRcIl0sXG4gICAgICBbL1xcZCsvLCBcIm51bWJlclwiXSxcbiAgICAgIC8vIGRlbGltaXRlcjogYWZ0ZXIgbnVtYmVyIGJlY2F1c2Ugb2YgLlxcZCBmbG9hdHNcbiAgICAgIFsvWzssLl0vLCBcImRlbGltaXRlclwiXSxcbiAgICAgIC8vIHN0cmluZ3NcbiAgICAgIC8vWy9cIihbXlwiXFxcXF18XFxcXC4pKiQvLCAnc3RyaW5nLmludmFsaWQnIF0sICAvLyBub24tdGVtaW5hdGVkIHN0cmluZ1xuICAgICAgWy9cIi8sIHsgdG9rZW46IFwic3RyaW5nLnF1b3RlXCIsIGJyYWNrZXQ6IFwiQG9wZW5cIiwgbmV4dDogXCJAc3RyaW5nXCIgfV1cbiAgICBdLFxuICAgIHN0cmluZzogW1xuICAgICAgWy9bXlxcXFxcIl0rLywgXCJzdHJpbmdcIl0sXG4gICAgICBbL0Blc2NhcGVzLywgXCJzdHJpbmcuZXNjYXBlXCJdLFxuICAgICAgWy9cIi8sIHsgdG9rZW46IFwic3RyaW5nLnF1b3RlXCIsIGJyYWNrZXQ6IFwiQGNsb3NlXCIsIG5leHQ6IFwiQHBvcFwiIH1dXG4gICAgXSxcbiAgICBuYW1lc3BhY2U6IFtcbiAgICAgIHsgaW5jbHVkZTogXCJAd2hpdGVzcGFjZVwiIH0sXG4gICAgICBbL1tBLVphLXpdXFx3Ki8sIFwibmFtZXNwYWNlXCJdLFxuICAgICAgWy9bXFwuPV0vLCBcImRlbGltaXRlclwiXSxcbiAgICAgIFtcIlwiLCBcIlwiLCBcIkBwb3BcIl1cbiAgICBdLFxuICAgIHdoaXRlc3BhY2U6IFtcbiAgICAgIFsvWyBcXHRcXHJcXG5dKy8sIFwid2hpdGVcIl0sXG4gICAgICBbLyhcXC9cXC8pLiovLCBcImNvbW1lbnRcIl1cbiAgICBdXG4gIH1cbn07XG5leHBvcnQge1xuICBjb25mLFxuICBsYW5ndWFnZVxufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==