// Generated from grammars/Rust1.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class Rust1Lexer extends Lexer {
	public static readonly T__0 = 1;
	public static readonly T__1 = 2;
	public static readonly T__2 = 3;
	public static readonly T__3 = 4;
	public static readonly T__4 = 5;
	public static readonly T__5 = 6;
	public static readonly T__6 = 7;
	public static readonly T__7 = 8;
	public static readonly T__8 = 9;
	public static readonly T__9 = 10;
	public static readonly T__10 = 11;
	public static readonly T__11 = 12;
	public static readonly T__12 = 13;
	public static readonly T__13 = 14;
	public static readonly T__14 = 15;
	public static readonly T__15 = 16;
	public static readonly T__16 = 17;
	public static readonly T__17 = 18;
	public static readonly T__18 = 19;
	public static readonly T__19 = 20;
	public static readonly T__20 = 21;
	public static readonly T__21 = 22;
	public static readonly T__22 = 23;
	public static readonly T__23 = 24;
	public static readonly T__24 = 25;
	public static readonly T__25 = 26;
	public static readonly T__26 = 27;
	public static readonly T__27 = 28;
	public static readonly T__28 = 29;
	public static readonly T__29 = 30;
	public static readonly T__30 = 31;
	public static readonly T__31 = 32;
	public static readonly T__32 = 33;
	public static readonly T__33 = 34;
	public static readonly T__34 = 35;
	public static readonly T__35 = 36;
	public static readonly T__36 = 37;
	public static readonly T__37 = 38;
	public static readonly JUNK = 39;
	public static readonly NUMBER = 40;
	public static readonly IDENTIFIER = 41;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
		"T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "T__23", "T__24", 
		"T__25", "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", "T__32", 
		"T__33", "T__34", "T__35", "T__36", "T__37", "JUNK", "NUMBER", "IDENTIFIER", 
		"LETTER", "DIGIT",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "';'", "'const'", "':'", "'='", "'let'", "'fn'", "'('", "')'", 
		"'->'", "'return'", "'if'", "'else'", "','", "'{'", "'}'", "'+'", "'-'", 
		"'*'", "'/'", "'=='", "'!='", "'<'", "'>'", "'<='", "'>='", "'!'", "'&&'", 
		"'||'", "'.'", "'true'", "'false'", "'\"'", "'\\'", "'i32'", "'f32'", 
		"'bool'", "'char'", "'println!'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, "JUNK", "NUMBER", "IDENTIFIER",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(Rust1Lexer._LITERAL_NAMES, Rust1Lexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return Rust1Lexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(Rust1Lexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "Rust1.g4"; }

	// @Override
	public get ruleNames(): string[] { return Rust1Lexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return Rust1Lexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return Rust1Lexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return Rust1Lexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02+\xED\b\x01\x04" +
		"\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04" +
		"\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r\t\r" +
		"\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t\x12" +
		"\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t\x17" +
		"\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t\x1C" +
		"\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t\"\x04" +
		"#\t#\x04$\t$\x04%\t%\x04&\t&\x04\'\t\'\x04(\t(\x04)\t)\x04*\t*\x04+\t" +
		"+\x04,\t,\x03\x02\x03\x02\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03" +
		"\x03\x03\x04\x03\x04\x03\x05\x03\x05\x03\x06\x03\x06\x03\x06\x03\x06\x03" +
		"\x07\x03\x07\x03\x07\x03\b\x03\b\x03\t\x03\t\x03\n\x03\n\x03\n\x03\v\x03" +
		"\v\x03\v\x03\v\x03\v\x03\v\x03\v\x03\f\x03\f\x03\f\x03\r\x03\r\x03\r\x03" +
		"\r\x03\r\x03\x0E\x03\x0E\x03\x0F\x03\x0F\x03\x10\x03\x10\x03\x11\x03\x11" +
		"\x03\x12\x03\x12\x03\x13\x03\x13\x03\x14\x03\x14\x03\x15\x03\x15\x03\x15" +
		"\x03\x16\x03\x16\x03\x16\x03\x17\x03\x17\x03\x18\x03\x18\x03\x19\x03\x19" +
		"\x03\x19\x03\x1A\x03\x1A\x03\x1A\x03\x1B\x03\x1B\x03\x1C\x03\x1C\x03\x1C" +
		"\x03\x1D\x03\x1D\x03\x1D\x03\x1E\x03\x1E\x03\x1F\x03\x1F\x03\x1F\x03\x1F" +
		"\x03\x1F\x03 \x03 \x03 \x03 \x03 \x03 \x03!\x03!\x03\"\x03\"\x03#\x03" +
		"#\x03#\x03#\x03$\x03$\x03$\x03$\x03%\x03%\x03%\x03%\x03%\x03&\x03&\x03" +
		"&\x03&\x03&\x03\'\x03\'\x03\'\x03\'\x03\'\x03\'\x03\'\x03\'\x03\'\x03" +
		"(\x06(\xD6\n(\r(\x0E(\xD7\x03(\x03(\x03)\x06)\xDD\n)\r)\x0E)\xDE\x03*" +
		"\x03*\x03*\x03*\x07*\xE5\n*\f*\x0E*\xE8\v*\x03+\x03+\x03,\x03,\x02\x02" +
		"\x02-\x03\x02\x03\x05\x02\x04\x07\x02\x05\t\x02\x06\v\x02\x07\r\x02\b" +
		"\x0F\x02\t\x11\x02\n\x13\x02\v\x15\x02\f\x17\x02\r\x19\x02\x0E\x1B\x02" +
		"\x0F\x1D\x02\x10\x1F\x02\x11!\x02\x12#\x02\x13%\x02\x14\'\x02\x15)\x02" +
		"\x16+\x02\x17-\x02\x18/\x02\x191\x02\x1A3\x02\x1B5\x02\x1C7\x02\x1D9\x02" +
		"\x1E;\x02\x1F=\x02 ?\x02!A\x02\"C\x02#E\x02$G\x02%I\x02&K\x02\'M\x02(" +
		"O\x02)Q\x02*S\x02+U\x02\x02W\x02\x02\x03\x02\x05\x05\x02\v\f\x0F\x0F\"" +
		"\"\x04\x02C\\c|\x03\x022;\x02\xEF\x02\x03\x03\x02\x02\x02\x02\x05\x03" +
		"\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02\x02\x02\x02\v\x03\x02" +
		"\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x02\x11\x03\x02" +
		"\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02\x17\x03\x02" +
		"\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02\x02\x02\x02\x1D\x03\x02" +
		"\x02\x02\x02\x1F\x03\x02\x02\x02\x02!\x03\x02\x02\x02\x02#\x03\x02\x02" +
		"\x02\x02%\x03\x02\x02\x02\x02\'\x03\x02\x02\x02\x02)\x03\x02\x02\x02\x02" +
		"+\x03\x02\x02\x02\x02-\x03\x02\x02\x02\x02/\x03\x02\x02\x02\x021\x03\x02" +
		"\x02\x02\x023\x03\x02\x02\x02\x025\x03\x02\x02\x02\x027\x03\x02\x02\x02" +
		"\x029\x03\x02\x02\x02\x02;\x03\x02\x02\x02\x02=\x03\x02\x02\x02\x02?\x03" +
		"\x02\x02\x02\x02A\x03\x02\x02\x02\x02C\x03\x02\x02\x02\x02E\x03\x02\x02" +
		"\x02\x02G\x03\x02\x02\x02\x02I\x03\x02\x02\x02\x02K\x03\x02\x02\x02\x02" +
		"M\x03\x02\x02\x02\x02O\x03\x02\x02\x02\x02Q\x03\x02\x02\x02\x02S\x03\x02" +
		"\x02\x02\x03Y\x03\x02\x02\x02\x05[\x03\x02\x02\x02\x07a\x03\x02\x02\x02" +
		"\tc\x03\x02\x02\x02\ve\x03\x02\x02\x02\ri\x03\x02\x02\x02\x0Fl\x03\x02" +
		"\x02\x02\x11n\x03\x02\x02\x02\x13p\x03\x02\x02\x02\x15s\x03\x02\x02\x02" +
		"\x17z\x03\x02\x02\x02\x19}\x03\x02\x02\x02\x1B\x82\x03\x02\x02\x02\x1D" +
		"\x84\x03\x02\x02\x02\x1F\x86\x03\x02\x02\x02!\x88\x03\x02\x02\x02#\x8A" +
		"\x03\x02\x02\x02%\x8C\x03\x02\x02\x02\'\x8E\x03\x02\x02\x02)\x90\x03\x02" +
		"\x02\x02+\x93\x03\x02\x02\x02-\x96\x03\x02\x02\x02/\x98\x03\x02\x02\x02" +
		"1\x9A\x03\x02\x02\x023\x9D\x03\x02\x02\x025\xA0\x03\x02\x02\x027\xA2\x03" +
		"\x02\x02\x029\xA5\x03\x02\x02\x02;\xA8\x03\x02\x02\x02=\xAA\x03\x02\x02" +
		"\x02?\xAF\x03\x02\x02\x02A\xB5\x03\x02\x02\x02C\xB7\x03\x02\x02\x02E\xB9" +
		"\x03\x02\x02\x02G\xBD\x03\x02\x02\x02I\xC1\x03\x02\x02\x02K\xC6\x03\x02" +
		"\x02\x02M\xCB\x03\x02\x02\x02O\xD5\x03\x02\x02\x02Q\xDC\x03\x02\x02\x02" +
		"S\xE0\x03\x02\x02\x02U\xE9\x03\x02\x02\x02W\xEB\x03\x02\x02\x02YZ\x07" +
		"=\x02\x02Z\x04\x03\x02\x02\x02[\\\x07e\x02\x02\\]\x07q\x02\x02]^\x07p" +
		"\x02\x02^_\x07u\x02\x02_`\x07v\x02\x02`\x06\x03\x02\x02\x02ab\x07<\x02" +
		"\x02b\b\x03\x02\x02\x02cd\x07?\x02\x02d\n\x03\x02\x02\x02ef\x07n\x02\x02" +
		"fg\x07g\x02\x02gh\x07v\x02\x02h\f\x03\x02\x02\x02ij\x07h\x02\x02jk\x07" +
		"p\x02\x02k\x0E\x03\x02\x02\x02lm\x07*\x02\x02m\x10\x03\x02\x02\x02no\x07" +
		"+\x02\x02o\x12\x03\x02\x02\x02pq\x07/\x02\x02qr\x07@\x02\x02r\x14\x03" +
		"\x02\x02\x02st\x07t\x02\x02tu\x07g\x02\x02uv\x07v\x02\x02vw\x07w\x02\x02" +
		"wx\x07t\x02\x02xy\x07p\x02\x02y\x16\x03\x02\x02\x02z{\x07k\x02\x02{|\x07" +
		"h\x02\x02|\x18\x03\x02\x02\x02}~\x07g\x02\x02~\x7F\x07n\x02\x02\x7F\x80" +
		"\x07u\x02\x02\x80\x81\x07g\x02\x02\x81\x1A\x03\x02\x02\x02\x82\x83\x07" +
		".\x02\x02\x83\x1C\x03\x02\x02\x02\x84\x85\x07}\x02\x02\x85\x1E\x03\x02" +
		"\x02\x02\x86\x87\x07\x7F\x02\x02\x87 \x03\x02\x02\x02\x88\x89\x07-\x02" +
		"\x02\x89\"\x03\x02\x02\x02\x8A\x8B\x07/\x02\x02\x8B$\x03\x02\x02\x02\x8C" +
		"\x8D\x07,\x02\x02\x8D&\x03\x02\x02\x02\x8E\x8F\x071\x02\x02\x8F(\x03\x02" +
		"\x02\x02\x90\x91\x07?\x02\x02\x91\x92\x07?\x02\x02\x92*\x03\x02\x02\x02" +
		"\x93\x94\x07#\x02\x02\x94\x95\x07?\x02\x02\x95,\x03\x02\x02\x02\x96\x97" +
		"\x07>\x02\x02\x97.\x03\x02\x02\x02\x98\x99\x07@\x02\x02\x990\x03\x02\x02" +
		"\x02\x9A\x9B\x07>\x02\x02\x9B\x9C\x07?\x02\x02\x9C2\x03\x02\x02\x02\x9D" +
		"\x9E\x07@\x02\x02\x9E\x9F\x07?\x02\x02\x9F4\x03\x02\x02\x02\xA0\xA1\x07" +
		"#\x02\x02\xA16\x03\x02\x02\x02\xA2\xA3\x07(\x02\x02\xA3\xA4\x07(\x02\x02" +
		"\xA48\x03\x02\x02\x02\xA5\xA6\x07~\x02\x02\xA6\xA7\x07~\x02\x02\xA7:\x03" +
		"\x02\x02\x02\xA8\xA9\x070\x02\x02\xA9<\x03\x02\x02\x02\xAA\xAB\x07v\x02" +
		"\x02\xAB\xAC\x07t\x02\x02\xAC\xAD\x07w\x02\x02\xAD\xAE\x07g\x02\x02\xAE" +
		">\x03\x02\x02\x02\xAF\xB0\x07h\x02\x02\xB0\xB1\x07c\x02\x02\xB1\xB2\x07" +
		"n\x02\x02\xB2\xB3\x07u\x02\x02\xB3\xB4\x07g\x02\x02\xB4@\x03\x02\x02\x02" +
		"\xB5\xB6\x07$\x02\x02\xB6B\x03\x02\x02\x02\xB7\xB8\x07^\x02\x02\xB8D\x03" +
		"\x02\x02\x02\xB9\xBA\x07k\x02\x02\xBA\xBB\x075\x02\x02\xBB\xBC\x074\x02" +
		"\x02\xBCF\x03\x02\x02\x02\xBD\xBE\x07h\x02\x02\xBE\xBF\x075\x02\x02\xBF" +
		"\xC0\x074\x02\x02\xC0H\x03\x02\x02\x02\xC1\xC2\x07d\x02\x02\xC2\xC3\x07" +
		"q\x02\x02\xC3\xC4\x07q\x02\x02\xC4\xC5\x07n\x02\x02\xC5J\x03\x02\x02\x02" +
		"\xC6\xC7\x07e\x02\x02\xC7\xC8\x07j\x02\x02\xC8\xC9\x07c\x02\x02\xC9\xCA" +
		"\x07t\x02\x02\xCAL\x03\x02\x02\x02\xCB\xCC\x07r\x02\x02\xCC\xCD\x07t\x02" +
		"\x02\xCD\xCE\x07k\x02\x02\xCE\xCF\x07p\x02\x02\xCF\xD0\x07v\x02\x02\xD0" +
		"\xD1\x07n\x02\x02\xD1\xD2\x07p\x02\x02\xD2\xD3\x07#\x02\x02\xD3N\x03\x02" +
		"\x02\x02\xD4\xD6\t\x02\x02\x02\xD5\xD4\x03\x02\x02\x02\xD6\xD7\x03\x02" +
		"\x02\x02\xD7\xD5\x03\x02\x02\x02\xD7\xD8\x03\x02\x02\x02\xD8\xD9\x03\x02" +
		"\x02\x02\xD9\xDA\b(\x02\x02\xDAP\x03\x02\x02\x02\xDB\xDD\x05W,\x02\xDC" +
		"\xDB\x03\x02\x02\x02\xDD\xDE\x03\x02\x02\x02\xDE\xDC\x03\x02\x02\x02\xDE" +
		"\xDF\x03\x02\x02\x02\xDFR\x03\x02\x02\x02\xE0\xE6\x05U+\x02\xE1\xE5\x05" +
		"U+\x02\xE2\xE5\x05W,\x02\xE3\xE5\x07a\x02\x02\xE4\xE1\x03\x02\x02\x02" +
		"\xE4\xE2\x03\x02\x02\x02\xE4\xE3\x03\x02\x02\x02\xE5\xE8\x03\x02\x02\x02" +
		"\xE6\xE4\x03\x02\x02\x02\xE6\xE7\x03\x02\x02\x02\xE7T\x03\x02\x02\x02" +
		"\xE8\xE6\x03\x02\x02\x02\xE9\xEA\t\x03\x02\x02\xEAV\x03\x02\x02\x02\xEB" +
		"\xEC\t\x04\x02\x02\xECX\x03\x02\x02\x02\x07\x02\xD7\xDE\xE4\xE6\x03\b" +
		"\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!Rust1Lexer.__ATN) {
			Rust1Lexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(Rust1Lexer._serializedATN));
		}

		return Rust1Lexer.__ATN;
	}

}

